# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DocumentChunkWithScore

    DocumentChunkWithScore(;
        id=nothing,
        text=nothing,
        metadata=nothing,
        embedding=nothing,
        score=nothing,
    )

    - id::String
    - text::String
    - metadata::DocumentChunkMetadata
    - embedding::Vector{Float64}
    - score::Float64
"""
Base.@kwdef mutable struct DocumentChunkWithScore <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    text::Union{Nothing, String} = nothing
    metadata = nothing # spec type: Union{ Nothing, DocumentChunkMetadata }
    embedding::Union{Nothing, Vector{Float64}} = nothing
    score::Union{Nothing, Float64} = nothing

    function DocumentChunkWithScore(id, text, metadata, embedding, score, )
        OpenAPI.validate_property(DocumentChunkWithScore, Symbol("id"), id)
        OpenAPI.validate_property(DocumentChunkWithScore, Symbol("text"), text)
        OpenAPI.validate_property(DocumentChunkWithScore, Symbol("metadata"), metadata)
        OpenAPI.validate_property(DocumentChunkWithScore, Symbol("embedding"), embedding)
        OpenAPI.validate_property(DocumentChunkWithScore, Symbol("score"), score)
        return new(id, text, metadata, embedding, score, )
    end
end # type DocumentChunkWithScore

const _property_types_DocumentChunkWithScore = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("text")=>"String", Symbol("metadata")=>"DocumentChunkMetadata", Symbol("embedding")=>"Vector{Float64}", Symbol("score")=>"Float64", )
OpenAPI.property_type(::Type{ DocumentChunkWithScore }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DocumentChunkWithScore[name]))}

function check_required(o::DocumentChunkWithScore)
    o.text === nothing && (return false)
    o.metadata === nothing && (return false)
    o.score === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ DocumentChunkWithScore }, name::Symbol, val)
end
