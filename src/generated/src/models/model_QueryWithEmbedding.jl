# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""
    QueryWithEmbedding(;
        query=nothing,
        filter=nothing,
        top_k=3,
        embedding=nothing,
    )

    - query::String
    - filter::DocumentMetadataFilter
    - top_k::Int64
    - embedding::Vector{Float64}
"""
Base.@kwdef mutable struct QueryWithEmbedding <: OpenAPI.APIModel
    query::Union{Nothing, String} = nothing
    filter = nothing # spec type: Union{ Nothing, DocumentMetadataFilter }
    top_k::Union{Nothing, Int64} = 3
    embedding::Union{Nothing, Vector{Float64}} = nothing

    function QueryWithEmbedding(query, filter, top_k, embedding, )
        OpenAPI.validate_property(QueryWithEmbedding, Symbol("query"), query)
        OpenAPI.validate_property(QueryWithEmbedding, Symbol("filter"), filter)
        OpenAPI.validate_property(QueryWithEmbedding, Symbol("top_k"), top_k)
        OpenAPI.validate_property(QueryWithEmbedding, Symbol("embedding"), embedding)
        return new(query, filter, top_k, embedding, )
    end
end # type QueryWithEmbedding

const _property_types_QueryWithEmbedding = Dict{Symbol,String}(Symbol("query")=>"String", Symbol("filter")=>"DocumentMetadataFilter", Symbol("top_k")=>"Int64", Symbol("embedding")=>"Vector{Float64}", )
OpenAPI.property_type(::Type{ QueryWithEmbedding }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QueryWithEmbedding[name]))}

function check_required(o::QueryWithEmbedding)
    true
end

function OpenAPI.validate_property(::Type{ QueryWithEmbedding }, name::Symbol, val)
end
